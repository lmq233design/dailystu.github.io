<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS浏览器渲染流程</title>
      <link href="/2022/06/30/JS%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/06/30/JS%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JS代码浏览器优化流程"><a href="#JS代码浏览器优化流程" class="headerlink" title="JS代码浏览器优化流程"></a>JS代码浏览器优化流程</h1><h3 id="chrome和node的引擎都采用的是V8引擎，那么什么是V8引擎？"><a href="#chrome和node的引擎都采用的是V8引擎，那么什么是V8引擎？" class="headerlink" title="chrome和node的引擎都采用的是V8引擎，那么什么是V8引擎？"></a>chrome和node的引擎都采用的是V8引擎，那么什么是V8引擎？</h3><p>V8是一个接受JS代码，编译代码然后执行的C++程序。帮助JS代码在多种操作系统上运行。<br>V8主要负责编译执行JS代码，处理调用栈，内存分配，垃圾回收。</p><p>V8组成结构：</p><ul><li>解析器</li><li>解释器</li><li>编译器</li></ul><blockquote><p>早期V8解析器生成语法树，然后编译器1生成未被优化的机器代码，然后运行一段时间后，编译器2生成优化后的机器代码；机器码内存占有量过大，优化困难，只执行一次的代码也会生成大量的机器码，对于新JS规范无法适应</p></blockquote><ul><li>解析器生成AST</li><li>解释器生成字节码，此时AST被清除，在运行中，这时候优化编译器会在字节码模块直接优化，字节码因为比机器代码高级，相对的代码占有容量简介程度也小很多；</li><li>编译器生成机器代码，但此时的机器代码也不是固定，因为JS本质上是一门动态语言，机器代码有可能deoptimization到字节码，例如中途变换代码的的参数类型，因为JS的数据类型只有VAR、LET一个大类；与此同时因为机器代码在重新优化的过程中，仅仅退回到字节码模块，而不需要像早期的V8代码一样整体源代码重新编译，所以性能得到更大的提升。</li></ul><hr><h3 id="浏览器是如何运作的？"><a href="#浏览器是如何运作的？" class="headerlink" title="浏览器是如何运作的？"></a>浏览器是如何运作的？</h3><p>浏览器进程，GPU进程，插件进程，缓存进程，网络进程，渲染器进程。</p><h4 id="一个页面JS没有及时归还主线程，会影响其他页面的加载吗？"><a href="#一个页面JS没有及时归还主线程，会影响其他页面的加载吗？" class="headerlink" title="一个页面JS没有及时归还主线程，会影响其他页面的加载吗？"></a>一个页面JS没有及时归还主线程，会影响其他页面的加载吗？</h4><blockquote><p>因为chrome浏览器默认采用的浏览页面进程管理策略，所以每个页面的浏览器渲染进程都是单独隔离。</p></blockquote><p>地址栏输入网址，浏览器进程UI捕捉，送给网络线程请求DNS进行域名解析，接着开始链接服务器获取数据。<br>之后：</p><ol><li>网络进程获取数据后通过safebrowsing检查站点是否是恶意站点，如通过查看IP是否在黑名单内；</li><li>网络进程发送消息给UI进程，UI进程创建渲染器进程渲染页面；</li><li>渲染器进程获得HTML，解析，构造DOM文档对象模型，进行DOM数构造，创建根document和节点；</li><li>构造DOM的过程中遇到JS程序，将会停止DOM树构造优先加载JS进程，因为JS会修改DOM结构；</li><li>主线程解析CSS去顶各个节点的样式，坐标，确定LAYOUT布局;</li><li>z-index会影响层级，所以会创建一个块表，里面放置了文档节点的层级以及绘制顺序；</li><li>最后进行栅格化；切分图块，然后放在内存中，最后用合成器线程进行合成，形成合成器帧；</li><li>传给GPU，进行渲染在页面上。</li></ol><p>在tips4中JS会参与到流程，但是如果整个JS进行运行的话，那么JS会抢占主线程，JS一旦没有及时归还主线程，则会导致下一帧的卡顿，所以可以将JS流程切分成小块，插分到整个渲染器进程中，比如REACT 就采用这一技术进行优化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>问好</title>
      <link href="/2022/06/21/my-new-post/"/>
      <url>/2022/06/21/my-new-post/</url>
      
        <content type="html"><![CDATA[<p><strong>你好，欢迎访问我的网站。</strong></p><p>目前我还在学习相关的内容去完善美化该网站，今后，我会把我日常的学习记录记载下来放在该网站上。</p><p><strong>很高兴和你相遇</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/21/hello-world/"/>
      <url>/2022/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
